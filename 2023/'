use advent_of_code_2023::Aoc;

fn part1(input: String) -> u32 {
    let mut lines = input.lines();
    let times = lines.next().unwrap();
    let times: Vec<u32> = times[11..times.len()]
        .split(" ")
        .filter_map(|t| {
            if t.len() == 0 {
                None
            } else {
                Some(t.parse().unwrap())
            }
        })
        .collect();
    let distances = lines.next().unwrap();
    let distances: Vec<u32> = distances[11..distances.len()]
        .split(" ")
        .filter_map(|t| {
            if t.len() == 0 {
                None
            } else {
                Some(t.parse().unwrap())
            }
        })
        .collect();

    for i in 0..times.len() {
        let ttotal = times[i];
        let distance = distances[i];

        // tpressed * (ttotal-tpressed) =distance
        // 0 < tpressed < ttotal
    }

    todo!()
}

fn part2(input: String) -> u32 {
    todo!()
}

fn main() {
    let mut aoc = Aoc::new();
    aoc.part("one", part1);
    aoc.part("two", part2);
    aoc.run();
}
